#
# summary(MLR)
samplingfrom = data2[data2$HaventSpray>0,]
data2 = samplingfrom
# MLR = lm(formula = simpleSusceptible ~ HaventSpray ,data=data2)
# plot(data2$HaventSpray,data2$simpleSusceptible)
#
# par(new=T)
# j=1
# for (i in 2:nrow(data2)) {
#   if ((data2$HaventSpray[i]-data2$HaventSpray[i-1])!=1){
#     lines(data2$HaventSpray[j:(i-1)],data2$simpleSusceptible[j:(i-1)],type="b")
#     j=i
#   }
# }
# lines(data2$HaventSpray[j:nrow(data2)],data2$simpleSusceptible[j:nrow(data2)],type="b")
# abline(MLR,col="red")
# MLR = lm(formula = simpleLowInfestation ~ HaventSpray ,data=data2)
plot(data2$HaventSpray,data2$simpleLowInfestation)
par(new=T)
j=1
for (i in 2:nrow(data2)) {
if ((data2$HaventSpray[i]-data2$HaventSpray[i-1])!=1){
lines(data2$HaventSpray[j:(i-1)],data2$simpleLowInfestation[j:(i-1)],type="b")
j=i
}
}
lines(data2$HaventSpray[j:nrow(data2)],data2$simpleLowInfestation[j:nrow(data2)],type="b")
# abline(MLR,col="red")
# data2$HaventSpray2 =  data2$HaventSpray^2
# MLR = lm(formula = simpleHighInfestation ~ HaventSpray ,data=data2)
plot(data2$HaventSpray,data2$simpleHighInfestation)
par(new=T)
j=1
for (i in 2:nrow(data2)) {
if ((data2$HaventSpray[i]-data2$HaventSpray[i-1])!=1){
lines(data2$HaventSpray[j:(i-1)],data2$simpleHighInfestation[j:(i-1)],type="b")
j=i
}
}
lines(data2$HaventSpray[j:nrow(data2)],data2$simpleHighInfestation[j:nrow(data2)],type="b")
# abline(MLR,col="red")
# summary(MLR)
# MLR = lm(formula = TOTAL.SUSCEPTIBLE ~ HaventSpray ,data=data2)
plot(data2$HaventSpray,data2$TOTAL.SUSCEPTIBLE)
par(new=T)
j=1
for (i in 2:nrow(data2)) {
if ((data2$HaventSpray[i]-data2$HaventSpray[i-1])!=1){
lines(data2$HaventSpray[j:(i-1)],data2$TOTAL.SUSCEPTIBLE[j:(i-1)],type="b")
j=i
}
}
lines(data2$HaventSpray[j:nrow(data2)],data2$TOTAL.SUSCEPTIBLE[j:nrow(data2)],type="b")
# abline(MLR,col="red")
# ---------------------------------------------------------------------------------
# data2$HaventSprayTransform = -1/data2$HaventSpray
# MLR = lm(formula = TOTAL.HIGH.INFESTATION ~ HaventSprayTransform  ,data=data2)
MLR = lm(formula = log(TOTAL.HIGH.INFESTATION) ~ HaventSpray  ,data=data2) # data2 -1 because the first element has high infestation =0 which make log -inf
plot(data2$HaventSpray,data2$TOTAL.HIGH.INFESTATION)
par(new=T)
j=1
for (i in 2:nrow(data2)) {
if ((data2$HaventSpray[i]-data2$HaventSpray[i-1])!=1){
lines(data2$HaventSpray[j:(i-1)],data2$TOTAL.HIGH.INFESTATION[j:(i-1)],type="b")
j=i
}
}
lines(data2$HaventSpray[j:nrow(data2)],data2$TOTAL.HIGH.INFESTATION[j:nrow(data2)],type="b")
# prediction = predict(MLR,list(HaventSprayTransform=-1/1:15))
# lines(1:15,prediction, col = "red", xlab = "HaventSpray (d)", ylab = "TOTAL.HIGH.INFESTATION")
Counts.exponential2 <- exp(predict(MLR,list(HaventSpray=0:15)))
lines(0:15, Counts.exponential2,lwd=2, col = "red", xlab = "HaventSpray (d)", ylab = "TOTAL.HIGH.INFESTATION")
summary(MLR)
# ---------------------------------------------------------------------------------
MLR = lm(formula = log(TOTAL.LOW.INFESTATION) ~ HaventSpray ,data=data2)
YR.COL = paste0("grey",data2$Data * 3)
plot(data2$HaventSpray,data2$TOTAL.LOW.INFESTATION)
par(new=T)
j=1
for (i in 2:nrow(data2)) {
if ((data2$HaventSpray[i]-data2$HaventSpray[i-1])!=1){
lines(data2$HaventSpray[j:(i-1)],data2$TOTAL.LOW.INFESTATION[j:(i-1)],type="b",col=YR.COL[j:(i-1)])
j=i
}
}
lines(data2$HaventSpray[j:nrow(data2)],data2$TOTAL.LOW.INFESTATION[j:nrow(data2)],type="b",col=YR.COL[j:nrow(data2)])
Counts.exponential2 <- exp(predict(MLR,list(HaventSpray=0:15)))
lines(0:15, Counts.exponential2,lwd=2, col = "red", xlab = "HaventSpray (d)", ylab = "TOTAL.LOW.INFESTATION")
summary(MLR)
# abline(MLR,col="red")
# ---------------------------------------------------------------------------------
plot(data2$HaventSpray,data2$TOTAL.HIGH.INFESTATION)
YR.COL = paste0("grey",data2$Data * 3)
par(new=T)
j=1
for (i in 2:nrow(data2)) {
if ((data2$HaventSpray[i]-data2$HaventSpray[i-1])!=1){
lines(data2$HaventSpray[j:(i-1)],data2$TOTAL.HIGH.INFESTATION[j:(i-1)],type="b",col=YR.COL[j:(i-1)])
j=i
}
}
lines(data2$HaventSpray[j:nrow(data2)],data2$TOTAL.HIGH.INFESTATION[j:nrow(data2)],type="b",col=YR.COL[j:nrow(data2)])
# prediction = predict(MLR,list(HaventSprayTransform=-1/1:15))
# lines(1:15,prediction, col = "red", xlab = "HaventSpray (d)", ylab = "TOTAL.HIGH.INFESTATION")
lines(0:15, (500-Counts.exponential2),lwd=2, col = "red", xlab = "HaventSpray (d)", ylab = "TOTAL.HIGH.INFESTATION")
# State.i %*% T.spray
# State.i %*% T.nospray
Reward = matrix(0,nrow = 25,ncol = 1)
for (i in 1:25){
Reward[i,] =  mean(samplingfrom$TOTAL.SUSCEPTIBLE[samplingfrom$HaventSpray==i]) * 6 + mean(samplingfrom$TOTAL.LOW.INFESTATION[samplingfrom$HaventSpray==i]) * 1.3 + mean(samplingfrom$TOTAL.HIGH.INFESTATION[samplingfrom$HaventSpray==i]) * 0.46
}
Reward
Reward[is.na(Reward)]= 0.46*500
data2.3 = read.csv("SprayOutputClean.csv")
Reward.spray = mean(data2.3$TOTAL.SUSCEPTIBLE[data2.3$HaventSpray==0]) * 6 + mean(data2.3$TOTAL.LOW.INFESTATION[data2.3$HaventSpray==0]) * 1.3 + mean(data2.3$TOTAL.HIGH.INFESTATION[data2.3$HaventSpray==0]) * 0.46
Cost.Spray = 0.50
Cost.no.Spray = 0
color = ifelse(Reward ==230,"red","blue")
plot(Reward,type="b",col=color,main="RewardofCider",xlab="DayNotSprayed")
# discount = 0.01
# v = 0
# for (n in 1:22){
#   v=pmax(T.spray%*%(matrix(c(rep(Cost.Spray,24),Reward.spray),25,1) + discount*v),T.nospray%*%(matrix(c(rep(Cost.Spray,24),Reward.spray),25,1) + discount * v))
# }
#
# State = matrix(0,nrow = 25,ncol =1)
State.247 = matrix(0,nrow = 1 , ncol =247)
name = {}
for ( i in 1:25){
for (j in 0:12){
if (j<i){
name = c(name,paste0(i,"-",j))
}
}
}
colnames(State.247) = name
#Population level of pest, Infestation Rate
#Use the infestation rate to make decision
#High or Low infestation is high med low
library(stringr)
library(rlang)
T247.NOSPRAY = matrix(0,247,247)
colnames(T247.NOSPRAY) = name
rownames(T247.NOSPRAY) = name
for (n in 1:247){
if (is_empty(which(name==paste0(as.numeric(strsplit(colnames(T247.NOSPRAY)[n], "[-]")[[1]][1])+1 ,"-", as.numeric(strsplit(colnames(T247.NOSPRAY)[n], "[-]")[[1]][2])+1)))){
if (is_empty(which(name==paste0(as.numeric(strsplit(colnames(T247.NOSPRAY)[n], "[-]")[[1]][1])+1 ,"-", as.numeric(strsplit(colnames(T247.NOSPRAY)[n], "[-]")[[1]][2]))))){
T247.NOSPRAY[n,n] = 1
} else{
T247.NOSPRAY[n,which(name==paste0(as.numeric(strsplit(colnames(T247.NOSPRAY)[n], "[-]")[[1]][1])+1 ,"-", as.numeric(strsplit(colnames(T247.NOSPRAY)[n], "[-]")[[1]][2])))]=1
}
} else{
T247.NOSPRAY[n,which(name==paste0(as.numeric(strsplit(colnames(T247.NOSPRAY)[n], "[-]")[[1]][1])+1 ,"-", as.numeric(strsplit(colnames(T247.NOSPRAY)[n], "[-]")[[1]][2])+1))]=1
}
}
T247.SPRAY = matrix(0,247,247)
colnames(T247.SPRAY) = name
rownames(T247.SPRAY) = name
for (n in 1:247){
T247.SPRAY[n,which(name==paste0(as.numeric(strsplit(colnames(T247.SPRAY)[n], "[-]")[[1]][1])+1 ,"-0"))]=1
}
# name
Reward.13 = c(rep(0,234),Reward.spray,Reward[1:12])
cost = 0.5
Reward.13[grepl('-0$', unlist(as.list(name)))] =  Reward.13[grepl('-0$', unlist(as.list(name)))] - cost
Reward.13[1] = 0
v=(rep(0,247))
for (n in 1:100){
v=pmax(Reward.13 + T247.SPRAY %*% v, Reward.13 + T247.NOSPRAY %*% v)
}
result=(Reward.13 + T247.SPRAY %*% v)>(Reward.13 + T247.NOSPRAY %*% v)
name[result == TRUE]
Reward.data = as.data.frame(cbind(c(Reward.spray,Reward[1:12]),0:12))
colnames(Reward.data) = c("Reward","NotSprayed")
lin.reg = lm(log(Reward) ~ NotSprayed,data = Reward.data[-1,])
pred = exp(predict(lin.reg, list(NotSprayed=0:24)))
pred[pred<230] =230
plot(0:24,(100 + (1500 - 200) * 1:25 / 25), xlab = "NotSprayed (Week)", ylab = "Reward" , type ="n" )
par(new=T)
lines(Reward.data$NotSprayed,Reward.data$Reward,type="b")
lines(0:24, pred,lwd=2, col = "red")
abline(230,0 ,lwd=2 , col ="blue")
Reward.Combined = c(Reward.spray,Reward[1:12],pred[14:25])
State.325 = matrix(0,nrow = 1 , ncol =325)
name = {}
for ( i in 1:25){
for (j in 0:24){
if (j<i){
name = c(name,paste0(i,"-",j))
}
}
}
colnames(State.325) = name
library(stringr)
library(rlang)
T325.NOSPRAY = matrix(0,325,325)
colnames(T325.NOSPRAY) = name
rownames(T325.NOSPRAY) = name
for (n in 1:325){
if (is_empty(which(name==paste0(as.numeric(strsplit(colnames(T325.NOSPRAY)[n], "[-]")[[1]][1])+1 ,"-", as.numeric(strsplit(colnames(T325.NOSPRAY)[n], "[-]")[[1]][2])+1)))){
T325.NOSPRAY[n,n] = 1
} else{
T325.NOSPRAY[n,which(name==paste0(as.numeric(strsplit(colnames(T325.NOSPRAY)[n], "[-]")[[1]][1])+1 ,"-", as.numeric(strsplit(colnames(T325.NOSPRAY)[n], "[-]")[[1]][2])+1))]=1
}
}
T325.SPRAY = matrix(0,325,325)
colnames(T325.SPRAY) = name
rownames(T325.SPRAY) = name
for (n in 1:325){
if (is_empty(which(name==paste0(as.numeric(strsplit(colnames(T325.SPRAY)[n], "[-]")[[1]][1])+1 ,"-0")))){
T325.SPRAY[n,n] = 1
} else{
T325.SPRAY[n,which(name==paste0(as.numeric(strsplit(colnames(T325.SPRAY)[n], "[-]")[[1]][1])+1 ,"-0"))]=1
}
}
# name
Reward.25 = c(rep(0,300),Reward.Combined)
cost = 0.5
Reward.25[grepl('-0$', unlist(as.list(name)))] =  Reward.25[grepl('-0$', unlist(as.list(name)))] - cost
Reward.25[1] = 0
v=(rep(0,325))
for (n in 1:25){
v=pmax(Reward.25 + T325.SPRAY %*% v, Reward.25 + T325.NOSPRAY %*% v)
}
result=(Reward.25 + T325.SPRAY %*% v)>(Reward.25 + T325.NOSPRAY %*% v)
name[result == TRUE]
#
# T325.NOSPRAY[result,result]
# result
# rowSums(T325.SPRAY)
#
# which(result)
data2.3 = read.csv("SprayOutputClean.csv")
data2.3$Level = paste0(floor(data2.3$TOTAL.SUSCEPTIBLE/167), floor(data2.3$TOTAL.LOW.INFESTATION/167),floor(data2.3$TOTAL.HIGH.INFESTATION/167))
data2.3$future.Level = c(data2.3$Level[-1],NA)
selection = which(is.na(data2.3$simpleLowInfestation))[-1]
data2.3 = data2.3[,-c(9:14)]
data2.3 = data2.3[-selection,]
tail(data2.3)
inf.state = unique(data2.3$Level)
week.state = unique(data2.3$WEEK)
haventspray.state = unique(data2.3$HaventSpray)
possible.state = {}
for ( i in week.state){
for (j in haventspray.state){
if (j<i){
for (k in inf.state){
possible.state = c(possible.state,paste0(i,"-",j,"-",k))
}
}
}
}
possible.combi = as.data.frame(matrix(0,length(possible.state),length(inf.state)*2))
colnames(possible.combi)[1:length(inf.state)] =  paste0("Spray-",inf.state)
colnames(possible.combi)[(length(inf.state)+1):(length(inf.state)*2)] =  paste0("NoSpray-",inf.state)
rownames(possible.combi) = possible.state
for (i in 1:nrow(data2.3)){
possible.combi[which(possible.state==paste0(data2.3$WEEK[i],"-",data2.3$HaventSpray[i],"-",data2.3$Level[i])),(which(data2.3$future.Level[i] == inf.state) + data2.3$SPRAY.APPLIED[i]*6)] = possible.combi[which(possible.state==paste0(data2.3$WEEK[i],"-",data2.3$HaventSpray[i],"-",data2.3$Level[i])),(which(data2.3$future.Level[i] == inf.state) + data2.3$SPRAY.APPLIED[i]*6)] + 1
}
possible.state[rowSums(possible.combi) > 0]
state2state = as.data.frame(matrix(0,length(inf.state),length(inf.state)*2))
rownames(state2state) = inf.state
colnames(state2state)[1:length(inf.state)] =  paste0("Spray-",inf.state)
colnames(state2state)[(length(inf.state)+1):(length(inf.state)*2)] =  paste0("NoSpray-",inf.state)
# state2state
for (i in 1:length(inf.state)){
smr = summary(as.factor(data2.3$future.Level[(data2.3$Level == inf.state[i]) & (data2.3$SPRAY.APPLIED == FALSE)]))
if (is.null(smr)==FALSE){
for (j in 1:length(smr)){
state2state[i,which(colnames(state2state)==paste0("NoSpray-",names(smr[j])))] = smr[j]
}
}
smr = summary(as.factor(data2.3$future.Level[(data2.3$Level == inf.state[i]) & (data2.3$SPRAY.APPLIED == TRUE)]))
if (is.null(smr)==FALSE){
for (j in 1:length(smr)){
state2state[i,which(colnames(state2state)==paste0("Spray-",names(smr[j])))] = smr[j]
}
}
}
state2state
# sum(rowSums(state2state))
Spray.s2s = state2state[,1:6]
NoSpray.s2s = state2state[,7:12]
rowSums(Spray.s2s)
rowSums(NoSpray.s2s)
Spray.s2s = Spray.s2s / rowSums(Spray.s2s)
NoSpray.s2s = NoSpray.s2s / rowSums(NoSpray.s2s)
Spray.s2s
NoSpray.s2s
Spray.s2s.Modified = Spray.s2s
Spray.s2s.Modified[is.na(rowSums(Spray.s2s.Modified)),] = matrix(colMeans(Spray.s2s.Modified[is.na(rowSums(Spray.s2s.Modified))==FALSE,]),sum(is.na(rowSums(Spray.s2s.Modified))),6,byrow = TRUE)
Spray.s2s.Modified
name = {}
for ( i in 1:24){
for (k in inf.state){
name = c(name,paste0(i,"-",k))
}
}
l.S2S = length(name)
State.144 = matrix(0,nrow = 1 , ncol =l.S2S)
colnames(State.144) = name
library(stringr)
library(rlang)
T144.NOSPRAY = matrix(0,144,144)
colnames(T144.NOSPRAY) = name
rownames(T144.NOSPRAY) = name
T144.SPRAY = matrix(0,144,144)
colnames(T144.SPRAY) = name
rownames(T144.SPRAY) = name
for (n in 1:144){
week = (as.numeric(strsplit(colnames(T144.NOSPRAY)[n], "[-]")[[1]][1]))
level = (strsplit(colnames(T144.NOSPRAY)[n], "[-]")[[1]][2])
if (week == 24){
T144.NOSPRAY[n,n] = 0 # AT TERMINATION STATE DO WE USE %100 REPEAT THE STATE OR STOPED IT
T144.SPRAY[n,n] = 0
} else{
T144.NOSPRAY[n,(week*6+1):((week+1)*6)] = as.matrix(NoSpray.s2s[inf.state == level,])
T144.SPRAY[n,(week*6+1):((week+1)*6)] = as.matrix(Spray.s2s.Modified[inf.state == level,])
}
}
# name
Expected.Reward = c(2*6,2*1.3,1*1.3+1*0.46,6+1.3,1.3,0.46*2)
Reward.NoSpray.144 = c(rep(0,138),Expected.Reward)
cost = 0.5/500
Reward.Spray.144 = Reward.NoSpray.144 - cost
v=(rep(0,144))
for (n in 1:100000){
v=pmax(Reward.Spray.144 + T144.SPRAY %*% v, Reward.NoSpray.144 + T144.NOSPRAY %*% v)
}
result=(Reward.Spray.144 + T144.SPRAY %*% v)>(Reward.NoSpray.144 + T144.NOSPRAY %*% v)
name[result == TRUE]
v=(rep(0,144))
for (n in 1:24){
v=pmax(Reward.Spray.144 + T144.SPRAY %*% v, Reward.NoSpray.144 + T144.NOSPRAY %*% v)
}
result=(Reward.Spray.144 + T144.SPRAY %*% v)>(Reward.NoSpray.144 + T144.NOSPRAY %*% v)
name[result == TRUE]
State.247 = matrix(0,nrow = 1 , ncol =247)
name = {}
for ( i in 1:25){
for (j in 0:12){
if (j<i){
name = c(name,paste0(i,"-",j))
}
}
}
colnames(State.247) = name
#Population level of pest, Infestation Rate
#Use the infestation rate to make decision
#High or Low infestation is high med low
library(stringr)
library(rlang)
T247.SPRAY = matrix(0,247,247)
colnames(T247.SPRAY) = name
rownames(T247.SPRAY) = name
for (n in 1:247){
T247.SPRAY[n,which(name==paste0(as.numeric(strsplit(colnames(T247.SPRAY)[n], "[-]")[[1]][1])+1 ,"-0"))]=1
}
T247.NOSPRAY = matrix(0,247,247)
colnames(T247.NOSPRAY) = name
rownames(T247.NOSPRAY) = name
for (n in 1:247){
if (is_empty(which(name==paste0(as.numeric(strsplit(colnames(T247.NOSPRAY)[n], "[-]")[[1]][1])+1 ,"-", as.numeric(strsplit(colnames(T247.NOSPRAY)[n], "[-]")[[1]][2])+1)))){
if (is_empty(which(name==paste0(as.numeric(strsplit(colnames(T247.NOSPRAY)[n], "[-]")[[1]][1])+1 ,"-", as.numeric(strsplit(colnames(T247.NOSPRAY)[n], "[-]")[[1]][2]))))){
T247.NOSPRAY[n,n] = 0
T247.SPRAY[n,n] = 0
} else{
T247.NOSPRAY[n,which(name==paste0(as.numeric(strsplit(colnames(T247.NOSPRAY)[n], "[-]")[[1]][1])+1 ,"-", as.numeric(strsplit(colnames(T247.NOSPRAY)[n], "[-]")[[1]][2])))]=1
}
} else{
T247.NOSPRAY[n,which(name==paste0(as.numeric(strsplit(colnames(T247.NOSPRAY)[n], "[-]")[[1]][1])+1 ,"-", as.numeric(strsplit(colnames(T247.NOSPRAY)[n], "[-]")[[1]][2])+1))]=1
}
}
# name
Reward.13 = c(rep(0,234),Reward.spray,Reward[1:12])
cost = 0.5
Reward.13[grepl('-0$', unlist(as.list(name)))] =  Reward.13[grepl('-0$', unlist(as.list(name)))] - cost
Reward.13[1] = 0
v=(rep(0,247))
for (n in 1:100){
v=pmax(Reward.13 + T247.SPRAY %*% v, Reward.13 + T247.NOSPRAY %*% v)
}
result=(Reward.13 + T247.SPRAY %*% v)>(Reward.13 + T247.NOSPRAY %*% v)
name[result == TRUE]
State.325 = matrix(0,nrow = 1 , ncol =325)
name = {}
for ( i in 1:25){
for (j in 0:24){
if (j<i){
name = c(name,paste0(i,"-",j))
}
}
}
colnames(State.325) = name
library(stringr)
library(rlang)
T325.NOSPRAY = matrix(0,325,325)
colnames(T325.NOSPRAY) = name
rownames(T325.NOSPRAY) = name
for (n in 1:325){
if (is_empty(which(name==paste0(as.numeric(strsplit(colnames(T325.NOSPRAY)[n], "[-]")[[1]][1])+1 ,"-", as.numeric(strsplit(colnames(T325.NOSPRAY)[n], "[-]")[[1]][2])+1)))){
T325.NOSPRAY[n,n] = 0
} else{
T325.NOSPRAY[n,which(name==paste0(as.numeric(strsplit(colnames(T325.NOSPRAY)[n], "[-]")[[1]][1])+1 ,"-", as.numeric(strsplit(colnames(T325.NOSPRAY)[n], "[-]")[[1]][2])+1))]=1
}
}
T325.SPRAY = matrix(0,325,325)
colnames(T325.SPRAY) = name
rownames(T325.SPRAY) = name
for (n in 1:325){
if (is_empty(which(name==paste0(as.numeric(strsplit(colnames(T325.SPRAY)[n], "[-]")[[1]][1])+1 ,"-0")))){
T325.SPRAY[n,n] = 0
} else{
T325.SPRAY[n,which(name==paste0(as.numeric(strsplit(colnames(T325.SPRAY)[n], "[-]")[[1]][1])+1 ,"-0"))]=1
}
}
# name
Reward.25 = c(rep(0,300),Reward.Combined)
cost = 0.5
Reward.25[grepl('-0$', unlist(as.list(name)))] =  Reward.25[grepl('-0$', unlist(as.list(name)))] - cost
Reward.25[1] = 0
v=(rep(0,325))
for (n in 1:25){
v=pmax(Reward.25 + T325.SPRAY %*% v, Reward.25 + T325.NOSPRAY %*% v)
}
result=(Reward.25 + T325.SPRAY %*% v)>(Reward.25 + T325.NOSPRAY %*% v)
name[result == TRUE]
#
# T325.NOSPRAY[result,result]
# result
# rowSums(T325.SPRAY)
#
# which(result)
load("C:/Users/USER/Documents/GitHub/GRE-vocab-practice/.RData")
vocab[grepl('rl$', unlist(as.list(read[1:1305]))),]
##########################################################################################################################
#                       Set your own Working Directory
##########################################################################################################################
setwd("~/GitHub/GRE-vocab-practice")
rm(list = ls())
#############################################################
#                       LOAD LIBRARY
#############################################################
# Need to go to http://www.omegahat.net/RHTMLForms/ manually download the library
# install.packages("C:/Users/USER/Downloads/RHTMLForms_0.6-0.tar.gz",
#                  repos = NULL, type = "source")
library(RHTMLForms)
library(RCurl)
library(XML)
library(rlist)
library(HelpersMG)
library(installr)
library(rlang)
##########################################################################################################################
vocab=read.csv("vocab1.csv",header=TRUE, stringsAsFactors = FALSE)
colnames(vocab) = c("word","definition")
##########################################################################################################################
# vocab=vocab[-8,]
read=as.data.frame(rep(NA,nrow(vocab)))
for (i in 1:nrow(vocab)){
if (is.na(read[i,])){
wget(url = paste0("https://www.dictionary.com/browse/",vocab$word[i]) ,destfile ="word")
webpage <- readLines("word")
htmlpage <- htmlParse(webpage, asText = TRUE)
Pronounce <- paste0(str_replace_all(strsplit(xpathSApply(htmlpage, "//div/span [@class='css-1khtv86 e1rg2mtf2']", xmlValue), "[,;]")[[1]][1], "[^[:alnum:]]", ""),"" )
read[i,] = Pronounce
}
}
vocab=read.csv("vocab1.csv",header=TRUE, stringsAsFactors = FALSE)
View(read)
read
which(read=="")
vocab[grepl('oh$', unlist(as.list(read[1:1305]))),]
vocab[grepl('oh$', unlist(as.list(read[1:1305]))),]
##########################################################################################################################
vocab=read.csv("vocab1.csv",header=TRUE, stringsAsFactors = FALSE)
colnames(vocab) = c("word","definition")
##########################################################################################################################
#                       Set your own Working Directory
##########################################################################################################################
setwd("~/GitHub/GRE-vocab-practice")
rm(list = ls())
#############################################################
#                       LOAD LIBRARY
#############################################################
# Need to go to http://www.omegahat.net/RHTMLForms/ manually download the library
# install.packages("C:/Users/USER/Downloads/RHTMLForms_0.6-0.tar.gz",
#                  repos = NULL, type = "source")
library(RHTMLForms)
library(RCurl)
library(XML)
library(rlist)
library(HelpersMG)
library(installr)
library(rlang)
##########################################################################################################################
vocab=read.csv("vocab1.csv",header=TRUE, stringsAsFactors = FALSE)
colnames(vocab) = c("word","definition")
vocab=read.csv("vocab1.csv",header=TRUE, stringsAsFactors = FALSE)
read
vocab=read.csv("vocab1.csv",header=TRUE, stringsAsFactors = FALSE)
View(vocab)
read = vocab$read
read
which(read=="")
vocab[grepl('oh$', unlist(as.list(read[1:1305]))),]
vocab[grepl('ue$', unlist(as.list(read[1:1305]))),]
vocab[grepl('de$', unlist(as.list(read[1:1305]))),]
vocab[grepl('oo$', unlist(as.list(read[1:1305]))),]
vocab[grepl('oot$', unlist(as.list(read[1:1305]))),]
vocab[grepl('dl$', unlist(as.list(read[1:1305]))),]
